<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorConverterFailedToIntermediate" xml:space="preserve">
    <value>Failed to clock count conversion.</value>
  </data>
  <data name="ErrorConverterFailedToMML" xml:space="preserve">
    <value>Failed to convert to MML.</value>
  </data>
  <data name="ErrorMIDIBroken" xml:space="preserve">
    <value>Could not read "{0}" because the MIDI was corrupted.</value>
  </data>
  <data name="ErrorMIDIFormat1" xml:space="preserve">
    <value>Failed to convert MIDI to format 1.</value>
  </data>
  <data name="ErrorMIDIReadFailed" xml:space="preserve">
    <value>Failed to read "{0}".</value>
  </data>
  <data name="ErrorMMLFailed" xml:space="preserve">
    <value>Failed to export to "{0}".</value>
  </data>
  <data name="ErrorModifierCutByBar" xml:space="preserve">
    <value>Failed to cut notes and rests by measure.</value>
  </data>
  <data name="ErrorModifierCutByCommands" xml:space="preserve">
    <value>Failed to cut notes and rests by commands.</value>
  </data>
  <data name="ErrorModifierOptimizeSamePlaceType" xml:space="preserve">
    <value>Failed to optimize same place and type commands.</value>
  </data>
  <data name="ErrorModifierOptimizeSameTypeValue" xml:space="preserve">
    <value>Failed to optimize same type and value commands.</value>
  </data>
  <data name="ErrorModifierPartReconstruct" xml:space="preserve">
    <value>Failed part reconstruction.</value>
  </data>
  <data name="ErrorModifierRemoveUselessCommands" xml:space="preserve">
    <value>Failed to remove commands that does not affect notes.</value>
  </data>
  <data name="ExportAs" xml:space="preserve">
    <value>Export as</value>
  </data>
  <data name="FailedTitle" xml:space="preserve">
    <value>Conversion failed</value>
  </data>
  <data name="InputMIDIDIalogTitle" xml:space="preserve">
    <value>Select MIDI file to convert</value>
  </data>
  <data name="MainMenuControlCommands" xml:space="preserve">
    <value>Control commands</value>
  </data>
  <data name="MainMenuGeneral" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="MainMenuMMLExpression1" xml:space="preserve">
    <value>MML expression (1)</value>
  </data>
  <data name="MainMenuMMLExpression2" xml:space="preserve">
    <value>MML expression (2)</value>
  </data>
  <data name="MainMenuNoteRest1" xml:space="preserve">
    <value>Note/Rest (1)</value>
  </data>
  <data name="MainMenuNoteRest2" xml:space="preserve">
    <value>Note/Rest(2)</value>
  </data>
  <data name="MainMenuPan" xml:space="preserve">
    <value>Pan</value>
  </data>
  <data name="MainMenuPart" xml:space="preserve">
    <value>Part</value>
  </data>
  <data name="MainMenuProgramChange" xml:space="preserve">
    <value>Program change</value>
  </data>
  <data name="MainMenuTempo" xml:space="preserve">
    <value>Tempo</value>
  </data>
  <data name="MainMenuVolume" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="OverMeasureC4" xml:space="preserve">
    <value>Keep (c4)</value>
  </data>
  <data name="OverMeasureC8And8" xml:space="preserve">
    <value>Divide (c8&amp;8)</value>
  </data>
  <data name="OverMeasureC8AndC8" xml:space="preserve">
    <value>Divide (c8&amp;c8)</value>
  </data>
  <data name="OverMeasureC8Hat8" xml:space="preserve">
    <value>Divide (c8^8)</value>
  </data>
  <data name="PanLCR" xml:space="preserve">
    <value>Left, Center, Right</value>
  </data>
  <data name="PanMIDI" xml:space="preserve">
    <value>Use MIDI value</value>
  </data>
  <data name="PanP" xml:space="preserve">
    <value>Pn (n: 0-255)</value>
  </data>
  <data name="PanPLPCPR" xml:space="preserve">
    <value>PLn (n: 1-127), PC, PRm (m: 1-127)</value>
  </data>
  <data name="PartAuto" xml:space="preserve">
    <value>Auto-assign</value>
  </data>
  <data name="PartCustom" xml:space="preserve">
    <value>Custom-assign</value>
  </data>
  <data name="PartDisabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="PartNoteExist" xml:space="preserve">
    <value>Exist</value>
  </data>
  <data name="PartNoteNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="StatusBarArrange" xml:space="preserve">
    <value>Arranging data...</value>
  </data>
  <data name="StatusBarComplete" xml:space="preserve">
    <value>Finish conversion</value>
  </data>
  <data name="StatusBarExport" xml:space="preserve">
    <value>Exporting MML...</value>
  </data>
  <data name="StatusBarFailed" xml:space="preserve">
    <value>Conversion failed</value>
  </data>
  <data name="StatusBarLoad" xml:space="preserve">
    <value>Loading "{0}"...</value>
  </data>
  <data name="StatusBarReady" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="StatusBarTimeBase" xml:space="preserve">
    <value>Changing MML clock count...</value>
  </data>
  <data name="SuccessText" xml:space="preserve">
    <value>Conversion is complete.</value>
  </data>
  <data name="SuccessTitle" xml:space="preserve">
    <value>Finish conversion</value>
  </data>
  <data name="TieLengthStyleC4And16" xml:space="preserve">
    <value>c4&amp;16</value>
  </data>
  <data name="TieLengthStyleC4AndC16" xml:space="preserve">
    <value>c4&amp;c16</value>
  </data>
  <data name="TieLengthStyleC4Hat16" xml:space="preserve">
    <value>c4^16</value>
  </data>
  <data name="TimeBasePMDC" xml:space="preserve">
    <value>Output as "C"</value>
  </data>
  <data name="TimeBasePMDZenlen" xml:space="preserve">
    <value>Output as "#Zenlen"</value>
  </data>
</root>